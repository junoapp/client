[{"/Users/paulomenezes/repositories/juno/client/src/index.tsx":"1","/Users/paulomenezes/repositories/juno/client/src/App.tsx":"2","/Users/paulomenezes/repositories/juno/client/src/pages/Dashboard.tsx":"3","/Users/paulomenezes/repositories/juno/client/src/pages/DatasetColumns.tsx":"4","/Users/paulomenezes/repositories/juno/client/src/pages/Home.tsx":"5","/Users/paulomenezes/repositories/juno/client/src/services/dataset.service.ts":"6","/Users/paulomenezes/repositories/juno/client/src/charts/HorizontalBarChart.tsx":"7","/Users/paulomenezes/repositories/juno/client/src/charts/VerticalBarChart.tsx":"8","/Users/paulomenezes/repositories/juno/client/src/charts/LineChart.tsx":"9","/Users/paulomenezes/repositories/juno/client/src/components/UploadFileForm.tsx":"10","/Users/paulomenezes/repositories/juno/client/src/components/DatasetsList.tsx":"11","/Users/paulomenezes/repositories/juno/client/src/components/form/Input.tsx":"12","/Users/paulomenezes/repositories/juno/client/src/components/form/Select.tsx":"13","/Users/paulomenezes/repositories/juno/client/src/components/DatabaseConnectionForm.tsx":"14","/Users/paulomenezes/repositories/juno/client/src/components/ui/Card.tsx":"15","/Users/paulomenezes/repositories/juno/client/src/hooks/useButtonGroup.tsx":"16","/Users/paulomenezes/repositories/juno/client/src/components/ui/Loading.tsx":"17","/Users/paulomenezes/repositories/juno/client/src/utils/functions.ts":"18","/Users/paulomenezes/repositories/juno/client/src/components/ui/Alert.tsx":"19","/Users/paulomenezes/repositories/juno/client/src/components/ui/Badge.tsx":"20","/Users/paulomenezes/repositories/juno/client/src/pages/UserAdd.tsx":"21","/Users/paulomenezes/repositories/juno/client/src/services/user.service.ts":"22","/Users/paulomenezes/repositories/juno/client/src/components/UsersList.tsx":"23","/Users/paulomenezes/repositories/juno/client/src/pages/UserView.tsx":"24","/Users/paulomenezes/repositories/juno/client/src/contexts/user.context.tsx":"25","/Users/paulomenezes/repositories/juno/client/src/components/DashboardList.tsx":"26","/Users/paulomenezes/repositories/juno/client/src/services/dashboard.service.ts":"27","/Users/paulomenezes/repositories/juno/client/src/services/dashboard-recommendation.service.ts":"28"},{"size":340,"mtime":1611016852436,"results":"29","hashOfConfig":"30"},{"size":1951,"mtime":1611111452658,"results":"31","hashOfConfig":"30"},{"size":4704,"mtime":1611108364677,"results":"32","hashOfConfig":"30"},{"size":11810,"mtime":1611184577262,"results":"33","hashOfConfig":"30"},{"size":1154,"mtime":1609705434042,"results":"34","hashOfConfig":"30"},{"size":1132,"mtime":1611020935835,"results":"35","hashOfConfig":"30"},{"size":2378,"mtime":1609701882060,"results":"36","hashOfConfig":"30"},{"size":3406,"mtime":1609701891160,"results":"37","hashOfConfig":"30"},{"size":2916,"mtime":1609982691073,"results":"38","hashOfConfig":"30"},{"size":1480,"mtime":1611107309021,"results":"39","hashOfConfig":"30"},{"size":3473,"mtime":1611019093343,"results":"40","hashOfConfig":"30"},{"size":638,"mtime":1608760494585,"results":"41","hashOfConfig":"30"},{"size":855,"mtime":1609702883576,"results":"42","hashOfConfig":"30"},{"size":2142,"mtime":1608760485535,"results":"43","hashOfConfig":"30"},{"size":549,"mtime":1608761828515,"results":"44","hashOfConfig":"30"},{"size":838,"mtime":1609702089939,"results":"45","hashOfConfig":"30"},{"size":352,"mtime":1608760505523,"results":"46","hashOfConfig":"30"},{"size":718,"mtime":1604534527400,"results":"47","hashOfConfig":"30"},{"size":740,"mtime":1608760544464,"results":"48","hashOfConfig":"30"},{"size":246,"mtime":1608760500474,"results":"49","hashOfConfig":"30"},{"size":2163,"mtime":1609981402090,"results":"50","hashOfConfig":"30"},{"size":627,"mtime":1609703822505,"results":"51","hashOfConfig":"30"},{"size":2527,"mtime":1611015098621,"results":"52","hashOfConfig":"30"},{"size":934,"mtime":1611105004308,"results":"53","hashOfConfig":"30"},{"size":567,"mtime":1611017138437,"results":"54","hashOfConfig":"30"},{"size":3490,"mtime":1611187400135,"results":"55","hashOfConfig":"30"},{"size":1351,"mtime":1611108165367,"results":"56","hashOfConfig":"30"},{"size":187,"mtime":1611093994379,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1su9u6q",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/paulomenezes/repositories/juno/client/src/index.tsx",[],["122","123"],"/Users/paulomenezes/repositories/juno/client/src/App.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/pages/Dashboard.tsx",["124","125","126","127","128","129","130","131","132","133"],"import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { VerticalBarChart } from '../charts/VerticalBarChart';\nimport {\n  DatasetRecommendation,\n  DatasetChartSpec,\n  DashboardInterface,\n  UserVisLiteracy,\n} from '@junoapp/common';\nimport { getById } from '../services/dashboard.service';\nimport { getSpec } from '../services/dashboard-recommendation.service';\n\nimport { LineChart } from '../charts/LineChart';\nimport { HorizontalBarChart } from '../charts/HorizontalBarChart';\nimport { FieldDefBase } from 'vega-lite/build/src/channeldef';\nimport { Field } from 'vega';\nimport { InlineData } from 'vega-lite/build/src/data';\nimport { VegaLite, VisualizationSpec } from 'react-vega';\n\nfunction convert(value: string) {\n  return isNaN(+value) ? undefined : +value;\n}\n\nexport function Dashboard(): JSX.Element {\n  const [chartData, setChartData] = useState<DatasetChartSpec[]>([]);\n  const [d, setD] = useState<DatasetRecommendation[]>([]);\n\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    getById(+id).then((dashboard: DashboardInterface) => {\n      getSpec(dashboard.id).then((data: DatasetRecommendation[]) => {\n        setD(data);\n\n        let cData: DatasetChartSpec[] = [];\n\n        for (const datum of data) {\n          if (\n            dashboard.userDatasets[0].owner.visLiteracy !== UserVisLiteracy.Low &&\n            data.length > 2 &&\n            data[0].mark === 'line' &&\n            data[1].mark === 'line' &&\n            data[0].value === data[1].value\n          ) {\n            if (datum.key === data[0].key) {\n              cData.push({\n                type: 'line-2',\n                hasSecondAxis: true,\n                // datum.mark === 'bar'\n                //   ? datum.key === (datum.encoding.x as FieldDefBase<Field>).field\n                //     ? 'vertical-bar'\n                //     : 'horizontal-bar'\n                //   : datum.mark,\n                name: `${datum.value} by ${datum.trimValues ? 'Top 30' : ''} ${datum.key}`,\n                values: ((datum.data as InlineData).values as Array<any>).map((v) => {\n                  const v2 = ((data[1].data as InlineData).values as Array<any>).find(\n                    (vv) => vv[data[1].key] === v[datum.key]\n                  );\n\n                  return {\n                    name: v[datum.key],\n                    value: convert(v[datum.value]),\n                    value2: v2 ? convert(v2[data[1].value]) : undefined,\n                  };\n                }),\n              });\n\n              console.log(cData);\n            }\n          } else {\n            cData.push({\n              type: datum.mark,\n              hasSecondAxis: false,\n              // datum.mark === 'bar'\n              //   ? datum.key === (datum.encoding.x as FieldDefBase<Field>).field\n              //     ? 'vertical-bar'\n              //     : 'horizontal-bar'\n              //   : datum.mark,\n              name: `${datum.value} by ${datum.trimValues ? 'Top 30' : ''} ${datum.key}`,\n              values: ((datum.data as InlineData).values as Array<any>).map((v) => ({\n                name: v[datum.key],\n                value: isNaN(+v[datum.value]) ? undefined : +v[datum.value],\n              })),\n            });\n          }\n        }\n\n        setChartData(cData);\n      });\n    });\n  }, [id]);\n\n  return (\n    <div>\n      {chartData &&\n        chartData.map((chart) => (\n          <div key={chart.name}>\n            {chart.type === 'line-2' && (\n              <LineChart\n                name={chart.name}\n                data={chart.values}\n                hasSecondAxis={true}\n                onPress={(data) => console.log(data)}\n              />\n            )}\n\n            {chart.type === 'line' && (\n              <LineChart\n                name={chart.name}\n                data={chart.values}\n                hasSecondAxis={false}\n                onPress={(data) => console.log(data)}\n              />\n            )}\n\n            {/* {chart.type === 'vertical-bar' && (\n              <VerticalBarChart\n                name={chart.name}\n                data={chart.values}\n                onPress={(data) => console.log(data)}\n              />\n            )}\n\n            {chart.type === 'horizontal-bar' && (\n              <HorizontalBarChart\n                name={chart.name}\n                data={chart.values}\n                onPress={(data) => console.log(data)}\n              />\n            )} */}\n          </div>\n        ))}\n\n      {d &&\n        d\n          .filter((dd) => dd.mark !== 'line')\n          .map((dd) => (\n            <span>\n              <VegaLite spec={dd as any} data={dd.data as any} />\n            </span>\n          ))}\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/pages/DatasetColumns.tsx",["134"],"import { useState, useEffect, useContext } from 'react';\nimport { Formik, Form, FieldArray } from 'formik';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport { getById } from '../services/dataset.service';\nimport * as dashboardService from '../services/dashboard.service';\nimport { Loading } from '../components/ui/Loading';\nimport { Card } from '../components/ui/Card';\nimport { Input } from '../components/form/Input';\nimport { Select } from '../components/form/Select';\nimport { UploadInfoField } from '../models/upload-info';\nimport { DropdownOption } from '../models/dropdown-option';\nimport { DashboardGoal, DashboardPurpose, DatasetColumnRole } from '@junoapp/common';\nimport { UserContext } from '../contexts/user.context';\n\nexport function DatasetColumns({ action }: { action: 'add' | 'edit' }): JSX.Element {\n  const [isLoading, setLoading] = useState(false);\n  const [values, setValues] = useState<{\n    name: string;\n    type: string;\n    purpose: string;\n    fields: Array<UploadInfoField>;\n  }>({ name: '', type: '', purpose: '', fields: [] });\n\n  const [name, setName] = useState<string | undefined>(undefined);\n\n  const { id } = useParams<{ id: string }>();\n  const history = useHistory();\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    setLoading(true);\n    if (action === 'add') {\n      getById(+id).then((response) => {\n        const formFields: UploadInfoField[] = [];\n        const indexes: DropdownOption[] = [];\n\n        response.columns.forEach((field, index) => {\n          formFields.push({\n            id: field.id,\n            originalName: field.name,\n            name: field.name,\n            role: field.role,\n            index,\n            removed: false,\n            type: field.type,\n          });\n\n          indexes.push({\n            label: index.toString(),\n            value: index.toString(),\n            isDisabled: false,\n          });\n        });\n\n        setName(response.originalname);\n        setLoading(false);\n        setValues({\n          name: response.originalname,\n          type: '',\n          purpose: '',\n          fields: formFields,\n        });\n      });\n    } else {\n      dashboardService.getById(+id).then((response) => {\n        const formFields: UploadInfoField[] = [];\n        const indexes: DropdownOption[] = [];\n\n        response.userDatasets[0].columns.forEach((field, index) => {\n          formFields.push({\n            id: field.id,\n            originalName: field.column.name,\n            name: field.name,\n            role: field.role,\n            index,\n            removed: field.removed,\n            type: field.column.type,\n          });\n\n          indexes.push({\n            label: index.toString(),\n            value: index.toString(),\n            isDisabled: false,\n          });\n        });\n\n        setName(response.name);\n        setLoading(false);\n        setValues({\n          name: response.name,\n          type: response.goalType,\n          purpose: response.goalPurpose,\n          fields: formFields,\n        });\n      });\n    }\n  }, [id]);\n\n  const backToHome = () => {\n    history.replace(`/user/${user}`);\n  };\n\n  const onDragEnd = (result: DropResult, swap: (indexA: number, indexB: number) => void) => {\n    if (result.destination) {\n      swap(result.source.index, result.destination.index);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <Card className=\"min-h\" title={name}>\n        <Loading loading={isLoading} />\n\n        {!isLoading && (\n          <div className=\"mt-4\">\n            <Formik\n              enableReinitialize={true}\n              initialValues={values}\n              onSubmit={async (values) => {\n                const fields = values.fields.map((f, i) => ({\n                  ...f,\n                  index: i,\n                  role: f.role as DatasetColumnRole,\n                }));\n                console.log(values, fields);\n                setLoading(true);\n                if (action === 'add') {\n                  await dashboardService.save({\n                    datasetId: +id,\n                    name: values.name,\n                    user: +user,\n                    goal: values.type as DashboardGoal,\n                    purpose: values.purpose as DashboardPurpose,\n                    colums: fields,\n                  });\n                } else {\n                  await dashboardService.update({\n                    id: +id,\n                    name: values.name,\n                    user: +user,\n                    goal: values.type as DashboardGoal,\n                    purpose: values.purpose as DashboardPurpose,\n                    colums: fields,\n                  });\n                }\n                backToHome();\n              }}\n            >\n              {({ getFieldProps, values, setFieldValue }) => (\n                <Form>\n                  <div className=\"flex -mx-4 bg-white\">\n                    <div className=\"px-4 w-1/3\">\n                      <Input name={`name`} label={`Name`} formik={{ getFieldProps }} />\n                    </div>\n                    <div className=\"px-4 w-1/3\">\n                      <Select\n                        name={`type`}\n                        label=\"Goal Type\"\n                        options={[\n                          { value: 'decisionMaking', label: 'Decision Making' },\n                          { value: 'awareness', label: 'Awareness' },\n                          { value: 'motivationalLearning', label: 'Motivational Learning' },\n                          { value: 'other', label: 'Other' },\n                        ]}\n                        formik={{ getFieldProps }}\n                      />\n                    </div>\n                    <div className=\"px-4 w-1/3\">\n                      <Select\n                        name={`purpose`}\n                        label=\"Goal Purpose\"\n                        options={[\n                          { value: 'strategic', label: 'Strategic' },\n                          { value: 'operational', label: 'Operational' },\n                          { value: 'organizational', label: 'Organizational' },\n                          { value: 'learning', label: 'Learning' },\n                        ]}\n                        formik={{ getFieldProps }}\n                      />\n                    </div>\n                  </div>\n\n                  <hr className=\"mt-2 mb-4\" />\n\n                  <FieldArray name=\"fields\">\n                    {({ remove, move }) => (\n                      <DragDropContext onDragEnd={(result) => onDragEnd(result, move)}>\n                        <Droppable droppableId=\"droppable\">\n                          {(provided, snapshot) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                              {values.fields.length > 0 &&\n                                values.fields.map((item, index) => (\n                                  <Draggable key={item.name} draggableId={item.name} index={index}>\n                                    {(provided, snapshot) => (\n                                      <div\n                                        className=\"flex -mx-4 bg-white\"\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                      >\n                                        <div className=\"px-4 flex items-center\">\n                                          <FontAwesomeIcon icon=\"bars\" />\n                                        </div>\n                                        <div className=\"px-4 w-2/5\">\n                                          <Input\n                                            name={`fields.${index}.originalName`}\n                                            label={`Original Name`}\n                                            formik={{ getFieldProps }}\n                                            disabled\n                                          />\n                                        </div>\n                                        <div className=\"px-4 w-2/5\">\n                                          <Input\n                                            name={`fields.${index}.name`}\n                                            label={`Name`}\n                                            formik={{ getFieldProps }}\n                                          />\n                                        </div>\n                                        <div className=\"px-4 w-2/5\">\n                                          <Input\n                                            name={`fields.${index}.type`}\n                                            label={`Type`}\n                                            formik={{ getFieldProps }}\n                                            disabled\n                                          />\n                                        </div>\n                                        <div className=\"px-4 w-2/5\">\n                                          <Select\n                                            name={`fields.${index}.role`}\n                                            label=\"Type\"\n                                            options={[\n                                              { value: 'measure', label: 'Measure' },\n                                              { value: 'dimension', label: 'Dimension' },\n                                            ]}\n                                            formik={{ getFieldProps }}\n                                          />\n                                        </div>\n                                        <div className=\"px-4 flex items-center\">\n                                          <button\n                                            type=\"button\"\n                                            className={`button ${\n                                              item.removed ? 'button-success' : 'button-danger'\n                                            }`}\n                                            onClick={() =>\n                                              setFieldValue(\n                                                `fields.${index}.removed`,\n                                                !values.fields[index].removed\n                                              )\n                                            }\n                                          >\n                                            <FontAwesomeIcon\n                                              icon={item.removed ? 'plus' : 'times'}\n                                            />\n                                          </button>\n                                        </div>\n                                      </div>\n                                    )}\n                                  </Draggable>\n                                ))}\n                              {provided.placeholder}\n                            </div>\n                          )}\n                        </Droppable>\n                      </DragDropContext>\n                    )}\n                  </FieldArray>\n                  <div className=\"flex justify-end\">\n                    <button type=\"button\" className=\"button mr-2\" onClick={backToHome}>\n                      Cancel\n                    </button>\n                    <button type=\"submit\" className=\"button button-primary\">\n                      Submit\n                    </button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/pages/Home.tsx",["135","136","137","138","139","140","141","142","143","144"],"import { Link } from 'react-router-dom';\n\nimport { useButtonGroup } from '../hooks/useButtonGroup';\nimport { UploadFileForm } from '../components/UploadFileForm';\nimport { DatabaseConnectionForm } from '../components/DatabaseConnectionForm';\nimport { DatasetsList } from '../components/DatasetsList';\nimport { UsersList } from '../components/UsersList';\n\nexport function Home(): JSX.Element {\n  const [dataset, ButtonGroup] = useButtonGroup(\n    [\n      { type: 'load', label: 'Load' },\n      { type: 'file', label: 'CSV file' },\n      { type: 'database', label: 'Database' },\n    ],\n    'load'\n  );\n\n  return (\n    <div>\n      <div className=\"flex\">\n        <Link to={`/user/add`} className=\"button button-primary\">\n          Add new user\n        </Link>\n      </div>\n\n      <div className=\"mt-5\">\n        <UsersList />\n      </div>\n\n      {/* <div>Select a previous dataset or insert a new one:</div>\n\n      <ButtonGroup />\n\n      <div className=\"mt-4\">\n        {dataset === 'load' && <DatasetsList />}\n        {dataset === 'file' && <UploadFileForm />}\n        {dataset === 'database' && <DatabaseConnectionForm />}\n      </div> */}\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/services/dataset.service.ts",[],"/Users/paulomenezes/repositories/juno/client/src/charts/HorizontalBarChart.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/charts/VerticalBarChart.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/charts/LineChart.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/UploadFileForm.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/DatasetsList.tsx",["145","146","147","148","149","150"],"import { useEffect, useState } from 'react';\nimport { formatRelative } from 'date-fns';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { getAll, remove } from '../services/dataset.service';\nimport { DatasetInterface, DatasetColumnRole, DashboardInterface } from '@junoapp/common';\nimport { Alert } from './ui/Alert';\nimport { Loading } from './ui/Loading';\nimport { Card } from './ui/Card';\nimport { Badge } from './ui/Badge';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport function DatasetsList(): JSX.Element {\n  const [datasets, setDatasets] = useState<DatasetInterface[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { id } = useParams<{ id: string }>();\n\n  const load = () => {\n    setIsLoading(true);\n\n    getAll().then((datasets) => {\n      setDatasets(datasets);\n      setIsLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const countColumns = (dataset: DatasetInterface, type: DatasetColumnRole): React.ReactNode => {\n    const count = dataset.columns.filter((column) => column.role === type).length;\n\n    if (count > 0) {\n      return (\n        <Badge>\n          {count} {type.toLowerCase()} column{count > 1 ? 's' : ''}\n        </Badge>\n      );\n    }\n\n    return null;\n  };\n\n  const onDeleteHandler = async (id: number) => {\n    setIsLoading(true);\n    await remove(id);\n    load();\n  };\n\n  return (\n    <div className=\"relative flex flex-wrap -mx-4 min-h\">\n      <Loading loading={isLoading} />\n\n      {!isLoading && datasets.length === 0 && (\n        <Alert\n          title=\"No dataset loaded\"\n          message=\"Upload a CSV file or connect with a database.\"\n          className=\"mx-4\"\n        />\n      )}\n\n      {!isLoading &&\n        datasets.length > 0 &&\n        datasets.map((dataset: DatasetInterface) => (\n          <div key={dataset.id} className=\"w-1/3 px-4 mb-4\">\n            <Card title={dataset.originalname}>\n              <div className=\"flex flex-col items-start\">\n                <Badge>CSV</Badge>\n                {countColumns(dataset, DatasetColumnRole.MEASURE)}\n                {countColumns(dataset, DatasetColumnRole.DIMENSION)}\n                <span className=\"text-gray-600 text-xs mb-2\">\n                  Updated {formatRelative(new Date(dataset.updatedDate), new Date())}\n                  <br />\n                  Created {formatRelative(new Date(dataset.createdDate), new Date())}\n                </span>\n              </div>\n              <div className=\"flex\">\n                {/* <Link\n                  to={`/user/${id}/dashboards/${dataset.id}/view`}\n                  className=\"button button-primary button-small mr-2\"\n                >\n                  <FontAwesomeIcon icon=\"eye\" />\n                  View\n                </Link> */}\n                <Link\n                  to={`/dashboard/add/${dataset.id}`}\n                  className=\"button button-primary button-small mr-2\"\n                >\n                  <FontAwesomeIcon icon=\"pencil-alt\" className=\"mr-1\" />\n                  Create new dashboard\n                </Link>\n                {/* <button\n                  type=\"button\"\n                  className=\"button button-danger button-small\"\n                  onClick={() => onDeleteHandler(dataset.id)}\n                >\n                  <FontAwesomeIcon icon=\"trash\" />\n                  Delete\n                </button> */}\n              </div>\n            </Card>\n          </div>\n        ))}\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/components/form/Input.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/form/Select.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/DatabaseConnectionForm.tsx",[],["151","152"],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Card.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/hooks/useButtonGroup.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Loading.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/utils/functions.ts",[],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Alert.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Badge.tsx",[],["153","154"],"/Users/paulomenezes/repositories/juno/client/src/pages/UserAdd.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/services/user.service.ts",[],"/Users/paulomenezes/repositories/juno/client/src/components/UsersList.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/pages/UserView.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/contexts/user.context.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/DashboardList.tsx",["155","156","157","158","159"],"import { useEffect, useState } from 'react';\nimport { formatRelative } from 'date-fns';\nimport { Link, useParams } from 'react-router-dom';\n\nimport { getAll, remove } from '../services/dashboard.service';\nimport { DatasetInterface, DatasetColumnRole, DashboardInterface } from '@junoapp/common';\nimport { Alert } from './ui/Alert';\nimport { Loading } from './ui/Loading';\nimport { Card } from './ui/Card';\nimport { Badge } from './ui/Badge';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport function DashboardList(): JSX.Element {\n  const [datasets, setDatasets] = useState<DashboardInterface[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const { id } = useParams<{ id: string }>();\n\n  const load = () => {\n    setIsLoading(true);\n\n    getAll(+id).then((datasets) => {\n      setDatasets(datasets);\n      setIsLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    load();\n  }, []);\n\n  const countColumns = (dataset: DashboardInterface, type: DatasetColumnRole): React.ReactNode => {\n    const count = dataset.userDatasets[0].columns.filter(\n      (column) => column.role === type && !column.removed\n    ).length;\n\n    if (count > 0) {\n      return (\n        <Badge>\n          {count} {type.toLowerCase()} column{count > 1 ? 's' : ''}\n        </Badge>\n      );\n    }\n\n    return null;\n  };\n\n  const onDeleteHandler = async (id: number) => {\n    setIsLoading(true);\n    await remove(id);\n    load();\n  };\n\n  return (\n    <div className=\"relative flex flex-wrap -mx-4 min-h\">\n      <Loading loading={isLoading} />\n\n      {!isLoading && datasets.length === 0 && (\n        <Alert\n          title=\"No dataset loaded\"\n          message=\"Upload a CSV file or connect with a database.\"\n          className=\"mx-4\"\n        />\n      )}\n\n      {!isLoading &&\n        datasets.length > 0 &&\n        datasets.map((dashboard: DashboardInterface) => (\n          <div key={dashboard.id} className=\"w-1/3 px-4 mb-4\">\n            <Card title={dashboard.name}>\n              <div className=\"flex flex-col items-start\">\n                <Badge>CSV</Badge>\n                {countColumns(dashboard, DatasetColumnRole.MEASURE)}\n                {countColumns(dashboard, DatasetColumnRole.DIMENSION)}\n                <span className=\"text-gray-600 text-xs mb-2\">\n                  Updated {formatRelative(new Date(dashboard.updatedDate), new Date())}\n                  <br />\n                  Created {formatRelative(new Date(dashboard.createdDate), new Date())}\n                </span>\n              </div>\n              <div className=\"flex\">\n                <Link\n                  to={`/dashboard/view/${dashboard.id}`}\n                  className=\"button button-primary button-small mr-2\"\n                >\n                  <FontAwesomeIcon icon=\"eye\" />\n                  View\n                </Link>\n                <Link\n                  to={`/dashboard/${dashboard.id}/edit`}\n                  className=\"button button-primary button-small mr-2\"\n                >\n                  <FontAwesomeIcon icon=\"pencil-alt\" />\n                  Edit\n                </Link>\n                {/* <button\n                  type=\"button\"\n                  className=\"button button-danger button-small\"\n                  onClick={() => onDeleteHandler(dataset.id)}\n                >\n                  <FontAwesomeIcon icon=\"trash\" />\n                  Delete\n                </button> */}\n              </div>\n            </Card>\n          </div>\n        ))}\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/services/dashboard.service.ts",[],"/Users/paulomenezes/repositories/juno/client/src/services/dashboard-recommendation.service.ts",[],{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":26},{"ruleId":"168","severity":1,"message":"165","line":3,"column":10,"nodeType":"166","messageId":"167","endLine":3,"endColumn":26},{"ruleId":"164","severity":1,"message":"169","line":14,"column":10,"nodeType":"166","messageId":"167","endLine":14,"endColumn":28},{"ruleId":"168","severity":1,"message":"169","line":14,"column":10,"nodeType":"166","messageId":"167","endLine":14,"endColumn":28},{"ruleId":"164","severity":1,"message":"170","line":15,"column":10,"nodeType":"166","messageId":"167","endLine":15,"endColumn":22},{"ruleId":"168","severity":1,"message":"170","line":15,"column":10,"nodeType":"166","messageId":"167","endLine":15,"endColumn":22},{"ruleId":"164","severity":1,"message":"171","line":16,"column":10,"nodeType":"166","messageId":"167","endLine":16,"endColumn":15},{"ruleId":"168","severity":1,"message":"171","line":16,"column":10,"nodeType":"166","messageId":"167","endLine":16,"endColumn":15},{"ruleId":"164","severity":1,"message":"172","line":18,"column":20,"nodeType":"166","messageId":"167","endLine":18,"endColumn":37},{"ruleId":"168","severity":1,"message":"172","line":18,"column":20,"nodeType":"166","messageId":"167","endLine":18,"endColumn":37},{"ruleId":"173","severity":1,"message":"174","line":100,"column":6,"nodeType":"175","endLine":100,"endColumn":10,"suggestions":"176"},{"ruleId":"164","severity":1,"message":"177","line":4,"column":10,"nodeType":"166","messageId":"167","endLine":4,"endColumn":24},{"ruleId":"168","severity":1,"message":"177","line":4,"column":10,"nodeType":"166","messageId":"167","endLine":4,"endColumn":24},{"ruleId":"164","severity":1,"message":"178","line":5,"column":10,"nodeType":"166","messageId":"167","endLine":5,"endColumn":32},{"ruleId":"168","severity":1,"message":"178","line":5,"column":10,"nodeType":"166","messageId":"167","endLine":5,"endColumn":32},{"ruleId":"164","severity":1,"message":"179","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":22},{"ruleId":"168","severity":1,"message":"179","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":22},{"ruleId":"164","severity":1,"message":"180","line":10,"column":10,"nodeType":"166","messageId":"167","endLine":10,"endColumn":17},{"ruleId":"168","severity":1,"message":"180","line":10,"column":10,"nodeType":"166","messageId":"167","endLine":10,"endColumn":17},{"ruleId":"164","severity":1,"message":"181","line":10,"column":19,"nodeType":"166","messageId":"167","endLine":10,"endColumn":30},{"ruleId":"168","severity":1,"message":"181","line":10,"column":19,"nodeType":"166","messageId":"167","endLine":10,"endColumn":30},{"ruleId":"164","severity":1,"message":"182","line":6,"column":47,"nodeType":"166","messageId":"167","endLine":6,"endColumn":65},{"ruleId":"168","severity":1,"message":"182","line":6,"column":47,"nodeType":"166","messageId":"167","endLine":6,"endColumn":65},{"ruleId":"164","severity":1,"message":"183","line":17,"column":11,"nodeType":"166","messageId":"167","endLine":17,"endColumn":13},{"ruleId":"168","severity":1,"message":"183","line":17,"column":11,"nodeType":"166","messageId":"167","endLine":17,"endColumn":13},{"ruleId":"164","severity":1,"message":"184","line":46,"column":9,"nodeType":"166","messageId":"167","endLine":46,"endColumn":24},{"ruleId":"168","severity":1,"message":"184","line":46,"column":9,"nodeType":"166","messageId":"167","endLine":46,"endColumn":24},{"ruleId":"160","replacedBy":"185"},{"ruleId":"162","replacedBy":"186"},{"ruleId":"160","replacedBy":"187"},{"ruleId":"162","replacedBy":"188"},{"ruleId":"164","severity":1,"message":"189","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":26},{"ruleId":"168","severity":1,"message":"189","line":6,"column":10,"nodeType":"166","messageId":"167","endLine":6,"endColumn":26},{"ruleId":"173","severity":1,"message":"190","line":30,"column":6,"nodeType":"175","endLine":30,"endColumn":8,"suggestions":"191"},{"ruleId":"164","severity":1,"message":"184","line":48,"column":9,"nodeType":"166","messageId":"167","endLine":48,"endColumn":24},{"ruleId":"168","severity":1,"message":"184","line":48,"column":9,"nodeType":"166","messageId":"167","endLine":48,"endColumn":24},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'VerticalBarChart' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'HorizontalBarChart' is defined but never used.","'FieldDefBase' is defined but never used.","'Field' is defined but never used.","'VisualizationSpec' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'action'. Either include it or remove the dependency array.","ArrayExpression",["194"],"'UploadFileForm' is defined but never used.","'DatabaseConnectionForm' is defined but never used.","'DatasetsList' is defined but never used.","'dataset' is assigned a value but never used.","'ButtonGroup' is assigned a value but never used.","'DashboardInterface' is defined but never used.","'id' is assigned a value but never used.","'onDeleteHandler' is assigned a value but never used.",["192"],["193"],["192"],["193"],"'DatasetInterface' is defined but never used.","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.",["195"],"no-global-assign","no-unsafe-negation",{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [action, id]",{"range":"200","text":"201"},"Update the dependencies array to be: [load]",{"range":"202","text":"203"},[3212,3216],"[action, id]",[918,920],"[load]"]