[{"/Users/paulomenezes/repositories/juno/client/src/index.tsx":"1","/Users/paulomenezes/repositories/juno/client/src/App.tsx":"2","/Users/paulomenezes/repositories/juno/client/src/pages/Dashboard.tsx":"3","/Users/paulomenezes/repositories/juno/client/src/pages/DatasetColumns.tsx":"4","/Users/paulomenezes/repositories/juno/client/src/pages/Home.tsx":"5","/Users/paulomenezes/repositories/juno/client/src/services/dataset.service.ts":"6","/Users/paulomenezes/repositories/juno/client/src/charts/HorizontalBarChart.tsx":"7","/Users/paulomenezes/repositories/juno/client/src/charts/VerticalBarChart.tsx":"8","/Users/paulomenezes/repositories/juno/client/src/charts/LineChart.tsx":"9","/Users/paulomenezes/repositories/juno/client/src/components/UploadFileForm.tsx":"10","/Users/paulomenezes/repositories/juno/client/src/components/DatasetsList.tsx":"11","/Users/paulomenezes/repositories/juno/client/src/components/form/Input.tsx":"12","/Users/paulomenezes/repositories/juno/client/src/components/form/Select.tsx":"13","/Users/paulomenezes/repositories/juno/client/src/components/DatabaseConnectionForm.tsx":"14","/Users/paulomenezes/repositories/juno/client/src/components/ui/Card.tsx":"15","/Users/paulomenezes/repositories/juno/client/src/hooks/useButtonGroup.tsx":"16","/Users/paulomenezes/repositories/juno/client/src/components/ui/Loading.tsx":"17","/Users/paulomenezes/repositories/juno/client/src/utils/functions.ts":"18","/Users/paulomenezes/repositories/juno/client/src/models/dataset.ts":"19","/Users/paulomenezes/repositories/juno/client/src/components/ui/Alert.tsx":"20","/Users/paulomenezes/repositories/juno/client/src/components/ui/Badge.tsx":"21"},{"size":250,"mtime":1608661025581,"results":"22","hashOfConfig":"23"},{"size":1349,"mtime":1608660987878,"results":"24","hashOfConfig":"23"},{"size":2494,"mtime":1607906266306,"results":"25","hashOfConfig":"23"},{"size":7129,"mtime":1607564144192,"results":"26","hashOfConfig":"23"},{"size":838,"mtime":1608661626206,"results":"27","hashOfConfig":"23"},{"size":1648,"mtime":1607882551052,"results":"28","hashOfConfig":"23"},{"size":3409,"mtime":1608661632304,"results":"29","hashOfConfig":"23"},{"size":3376,"mtime":1608567218273,"results":"30","hashOfConfig":"23"},{"size":3986,"mtime":1608567155145,"results":"31","hashOfConfig":"23"},{"size":1366,"mtime":1603379934601,"results":"32","hashOfConfig":"23"},{"size":3313,"mtime":1607564802572,"results":"33","hashOfConfig":"23"},{"size":665,"mtime":1598833810051,"results":"34","hashOfConfig":"23"},{"size":873,"mtime":1600218733092,"results":"35","hashOfConfig":"23"},{"size":2169,"mtime":1598842336932,"results":"36","hashOfConfig":"23"},{"size":564,"mtime":1598837245807,"results":"37","hashOfConfig":"23"},{"size":843,"mtime":1608661616052,"results":"38","hashOfConfig":"23"},{"size":379,"mtime":1598826641262,"results":"39","hashOfConfig":"23"},{"size":718,"mtime":1604534527400,"results":"40","hashOfConfig":"23"},{"size":918,"mtime":1607643374423,"results":"41","hashOfConfig":"23"},{"size":767,"mtime":1598838567901,"results":"42","hashOfConfig":"23"},{"size":274,"mtime":1598825914154,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1l27er7",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/paulomenezes/repositories/juno/client/src/index.tsx",[],["92","93"],"/Users/paulomenezes/repositories/juno/client/src/App.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/pages/Dashboard.tsx",["94","95","96","97"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { VerticalBarChart } from '../charts/VerticalBarChart';\nimport { Dataset } from '../models/dataset';\nimport { getById, getSpec } from '../services/dataset.service';\n\nimport { VegaLite } from 'react-vega';\nimport { LineChart } from '../charts/LineChart';\nimport { HorizontalBarChart } from '../charts/HorizontalBarChart';\n\nexport function Dashboard(): JSX.Element {\n  const [chartData, setChartData] = useState<any[]>([]);\n\n  const [specs, setSpecs] = useState<any[]>([]);\n  const [barData, setBarData] = useState<Record<string, any[]>[]>([]);\n\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    getById(+id).then(async (dataset: Dataset) => {\n      const data: any = await getSpec(dataset.id);\n\n      console.log(data);\n\n      let cData: any[] = [];\n      for (const d of data) {\n        const c = {\n          type:\n            d.mark === 'bar'\n              ? d.key === d.encoding.x.field\n                ? 'vertical-bar'\n                : 'horizontal-bar'\n              : d.mark,\n          name: `${d.value} by ${d.key}`,\n          values: d.data.values.map((v) => ({\n            name: v[d.key],\n            value: isNaN(+v[d.value]) ? undefined : +v[d.value],\n          })),\n        };\n\n        cData.push(c);\n      }\n\n      console.log(cData);\n\n      setChartData(cData);\n    });\n  }, [id]);\n\n  return (\n    <div>\n      {barData &&\n        specs &&\n        specs.length > 0 &&\n        specs.map((spec, index) => (\n          <div key={index}>\n            <VegaLite spec={spec} data={barData[index]} />\n          </div>\n        ))}\n\n      {chartData &&\n        chartData.map((chart) => (\n          <div key={chart.name}>\n            {chart.type === 'line' && (\n              <LineChart\n                name={chart.name}\n                data={chart.values}\n                onPress={(data) => console.log(data)}\n              />\n            )}\n\n            {chart.type === 'vertical-bar' && (\n              <VerticalBarChart\n                name={chart.name}\n                data={chart.values}\n                onPress={(data) => console.log(data)}\n              />\n            )}\n\n            {chart.type === 'horizontal-bar' && (\n              <HorizontalBarChart\n                name={chart.name}\n                data={chart.values}\n                onPress={(data) => console.log(data)}\n              />\n            )}\n          </div>\n        ))}\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/pages/DatasetColumns.tsx",["98","99"],"import React, { useState, useEffect } from 'react';\nimport { Formik, Form, FieldArray } from 'formik';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport { updateColumns, getById } from '../services/dataset.service';\nimport { Loading } from '../components/ui/Loading';\nimport { Card } from '../components/ui/Card';\nimport { Input } from '../components/form/Input';\nimport { Select } from '../components/form/Select';\nimport { UploadInfoField } from '../models/upload-info';\nimport { DropdownOption } from '../models/dropdown-option';\n\nexport function DatasetColumns(): JSX.Element {\n  const [isLoading, setLoading] = useState(false);\n  const [values, setValues] = useState<{ fields: Array<UploadInfoField> }>({ fields: [] });\n  const [name, setName] = useState<string | undefined>(undefined);\n  const [indexOptions, setIndexOptions] = useState<DropdownOption[]>([]);\n\n  const { id } = useParams<{ id: string }>();\n  const history = useHistory();\n\n  useEffect(() => {\n    setLoading(true);\n    getById(+id).then((response) => {\n      const formFields: UploadInfoField[] = [];\n      const indexes: DropdownOption[] = [];\n\n      response.columns.forEach((field, index) => {\n        formFields.push({\n          id: field.id,\n          name: field.name,\n          role: field.role,\n          index,\n        });\n\n        indexes.push({\n          label: index.toString(),\n          value: index.toString(),\n          isDisabled: false,\n        });\n      });\n\n      setIndexOptions(indexes);\n      setName(response.originalname);\n      setLoading(false);\n      setValues({\n        fields: formFields,\n      });\n    });\n  }, [id]);\n\n  const backToHome = () => {\n    history.replace('/');\n  };\n\n  const onDragEnd = (result: DropResult, swap: (indexA: number, indexB: number) => void) => {\n    if (result.destination) {\n      swap(result.source.index, result.destination.index);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <Card className=\"min-h\" title={name}>\n        <Loading loading={isLoading} />\n\n        {!isLoading && (\n          <div className=\"mt-4\">\n            <Formik\n              enableReinitialize={true}\n              initialValues={values}\n              onSubmit={async (values) => {\n                const fields = values.fields.map((f, i) => ({ ...f, index: i }));\n                console.log(values, fields);\n                setLoading(true);\n                await updateColumns(+id, fields);\n                backToHome();\n              }}\n            >\n              {({ getFieldProps, values }) => (\n                <Form>\n                  <FieldArray name=\"fields\">\n                    {({ remove, move }) => (\n                      <DragDropContext onDragEnd={(result) => onDragEnd(result, move)}>\n                        <Droppable droppableId=\"droppable\">\n                          {(provided, snapshot) => (\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\n                              {values.fields.length > 0 &&\n                                values.fields.map((item, index) => (\n                                  <Draggable key={item.name} draggableId={item.name} index={index}>\n                                    {(provided, snapshot) => (\n                                      <div\n                                        className=\"flex -mx-4 bg-white\"\n                                        ref={provided.innerRef}\n                                        {...provided.draggableProps}\n                                        {...provided.dragHandleProps}\n                                      >\n                                        <div className=\"px-4 flex items-center\">\n                                          <FontAwesomeIcon icon=\"bars\" />\n                                        </div>\n                                        <div className=\"px-4 w-1/5\">\n                                          {index}\n                                          {/* <Select\n                                            name={`fields.${index}.index`}\n                                            label=\"Index\"\n                                            options={indexOptions}\n                                            formik={{ getFieldProps }}\n                                          /> */}\n                                        </div>\n                                        <div className=\"px-4 w-2/5\">\n                                          <Input\n                                            name={`fields.${index}.name`}\n                                            label={`Name ${item.name} ${index}`}\n                                            formik={{ getFieldProps }}\n                                            disabled\n                                          />\n                                        </div>\n                                        <div className=\"px-4 w-2/5\">\n                                          <Select\n                                            name={`fields.${index}.role`}\n                                            label=\"Type\"\n                                            options={[\n                                              { value: 'measure', label: 'Measure' },\n                                              { value: 'dimension', label: 'Dimension' },\n                                            ]}\n                                            formik={{ getFieldProps }}\n                                          />\n                                        </div>\n                                        <div className=\"px-4 flex items-center\">\n                                          <button\n                                            type=\"button\"\n                                            className=\"button button-danger\"\n                                            onClick={() => remove(index)}\n                                          >\n                                            <FontAwesomeIcon icon=\"times\" />\n                                          </button>\n                                        </div>\n                                      </div>\n                                    )}\n                                  </Draggable>\n                                ))}\n                              {provided.placeholder}\n                            </div>\n                          )}\n                        </Droppable>\n                      </DragDropContext>\n                    )}\n                  </FieldArray>\n                  <div className=\"flex justify-end\">\n                    <button type=\"button\" className=\"button mr-2\" onClick={backToHome}>\n                      Cancel\n                    </button>\n                    <button type=\"submit\" className=\"button button-primary\">\n                      Submit\n                    </button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        )}\n      </Card>\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/pages/Home.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/services/dataset.service.ts",[],"/Users/paulomenezes/repositories/juno/client/src/charts/HorizontalBarChart.tsx",["100","101","102","103"],"import { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nimport { generateId, scaleBandInvert } from '../utils/functions';\n\nfunction elementId(svgId: string, id: string): string {\n  return `${svgId}-${id}`;\n}\n\nexport type ChartData = { name: string; value: number; index: number };\n\nexport function HorizontalBarChart(props: {\n  name: string;\n  data: Array<ChartData>;\n  onPress: (data: ChartData) => void;\n}): JSX.Element {\n  const [id] = useState<string>(generateId());\n\n  useEffect(() => {\n    const margin = {\n      top: 10,\n      bottom: 30,\n      left: 100,\n      right: 10,\n    };\n\n    const height = 400;\n\n    const svg = d3.select(`#${id}`).append('svg').attr('width', '100%').attr('height', height);\n    const width = svg.node()?.getBoundingClientRect().width;\n\n    const groupHover = svg.append('g').attr('id', elementId(id, 'group-data'));\n    const groupData = svg.append('g').attr('id', elementId(id, 'group-data'));\n    const groupAxis = svg.append('g').attr('id', elementId(id, 'group-axis'));\n\n    const xAcessor = (d: ChartData) => d.name;\n    const yAcessor = (d: ChartData) => d.value;\n\n    const keys = props.data.map(xAcessor);\n    const valueMax = d3.max(props.data, yAcessor);\n\n    const xScale = d3\n      .scaleLinear()\n      .domain([0, valueMax])\n      .range([margin.left, width - margin.right]);\n\n    const yScale = d3\n      .scaleBand()\n      .domain(keys)\n      .paddingInner(0.1)\n      .paddingOuter(0.1)\n      .range([height - margin.bottom, margin.top]);\n\n    const colorScale = d3.scaleOrdinal(keys.length > 10 ? ['#3575B1'] : d3.schemeCategory10);\n\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    // svg\n    //   .on('mousemove', function (event: any) {\n    //     const [x] = (d3 as any).pointer(event);\n\n    //     const name = scaleBandInvert(xScale)(x);\n\n    //     const d = props.data.find((d) => d.name === name);\n\n    //     groupHover.selectAll('.hover-rect').remove();\n    //     if (d) {\n    //       const scaleMargin = xScale.step() * xScale.paddingInner();\n\n    //       groupHover\n    //         .append('rect')\n    //         .attr('class', 'hover-rect')\n    //         .attr('x', (xScale(d.name) as number) - scaleMargin / 2)\n    //         .attr('y', yScale(valueMax))\n    //         .attr('width', xScale.bandwidth() + scaleMargin)\n    //         .attr('height', yScale(0) - margin.top)\n    //         .attr('fill', '#ccc')\n    //         .on('click', () => {\n    //           props.onPress(d);\n    //         });\n    //     }\n    //   })\n    //   .on('mouseleave', () => {\n    //     groupHover.selectAll('.hover-rect').remove();\n    //   });\n\n    groupData\n      .selectAll('rect.data-item')\n      .data(props.data)\n      .enter()\n      .append('rect')\n      .attr('class', 'data-item')\n      .attr('x', xScale(0))\n      .attr('y', (d) => yScale(d.name))\n      .attr('width', (d) => xScale(d.value))\n      .attr('height', yScale.bandwidth())\n      .attr('fill', (d) => colorScale(d.name))\n      .attr('pointer-events', 'none');\n\n    groupAxis\n      .append('g')\n      .call(xAxis)\n      .attr('transform', `translate(0, ${height - margin.bottom})`);\n\n    groupAxis.append('g').call(yAxis).attr('transform', `translate(${margin.left}, 0)`);\n\n    return () => {\n      svg.remove();\n    };\n  }, [id, props]);\n\n  return (\n    <div>\n      <h1>{props.name}</h1>\n      <div id={id}></div>\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/charts/VerticalBarChart.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/charts/LineChart.tsx",["104","105","106","107"],"import React, { useState, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nimport { generateId, scaleBandInvert } from '../utils/functions';\n\nfunction elementId(svgId: string, id: string): string {\n  return `${svgId}-${id}`;\n}\n\nexport type ChartData = { name: string; value: number; index: number };\n\nexport function LineChart(props: {\n  name: string;\n  data: Array<ChartData>;\n  onPress: (data: ChartData) => void;\n}): JSX.Element {\n  const [id] = useState<string>(generateId());\n\n  useEffect(() => {\n    const margin = {\n      top: 10,\n      bottom: 30,\n      left: 40,\n      right: 10,\n    };\n\n    const height = 400;\n\n    const svg = d3.select(`#${id}`).append('svg').attr('width', '100%').attr('height', height);\n    const width = svg.node()?.getBoundingClientRect().width;\n\n    // const groupHover = svg.append('g').attr('id', elementId(id, 'group-data'));\n    const groupData = svg.append('g').attr('id', elementId(id, 'group-data'));\n    const groupAxis = svg.append('g').attr('id', elementId(id, 'group-axis'));\n\n    const xAcessor = (d: ChartData) => new Date(d.name);\n    const yAcessor = (d: ChartData) => d.value;\n\n    const keys = props.data.map(xAcessor);\n    const valueMax = d3.max(props.data, yAcessor);\n\n    console.log(props.name, valueMax);\n\n    const extent = d3.extent(props.data, xAcessor);\n\n    const xScale = d3\n      .scaleTime()\n      .domain(extent)\n      .range([margin.left, width - margin.right]);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, valueMax])\n      .range([height - margin.bottom, margin.top]);\n\n    const colorScale = d3.scaleOrdinal(keys.length > 10 ? ['#3575B1'] : d3.schemeCategory10);\n\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    // svg\n    //   .on('mousemove', function (event: any) {\n    //     const [x] = (d3 as any).pointer(event);\n\n    //     const name = scaleBandInvert(xScale)(x);\n\n    //     const d = props.data.find((d) => d.name === name);\n\n    //     groupHover.selectAll('.hover-rect').remove();\n    //     if (d) {\n    //       const scaleMargin = xScale.step() * xScale.paddingInner();\n\n    //       groupHover\n    //         .append('rect')\n    //         .attr('class', 'hover-rect')\n    //         .attr('x', (xScale(d.name) as number) - scaleMargin / 2)\n    //         .attr('y', yScale(valueMax))\n    //         .attr('width', xScale.bandwidth() + scaleMargin)\n    //         .attr('height', yScale(0) - margin.top)\n    //         .attr('fill', '#ccc')\n    //         .on('click', () => {\n    //           props.onPress(d);\n    //         });\n    //     }\n    //   })\n    //   .on('mouseleave', () => {\n    //     groupHover.selectAll('.hover-rect').remove();\n    //   });\n\n    const lineGenerator = d3\n      .line<ChartData>()\n      .defined((d) => !isNaN(d.value))\n      .x((d) => xScale(new Date(d.name)))\n      .y((d) => yScale(d.value));\n\n    groupData\n      .append('path')\n      .datum(props.data)\n      .attr('d', lineGenerator)\n      .attr('width', width)\n      .attr('height', height)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 1.5)\n      .attr('stroke-linejoin', 'round')\n      .attr('stroke-linecap', 'round');\n\n    // groupData\n    //   .selectAll('rect.data-item')\n    //   .data(props.data)\n    //   .enter()\n    //   .append('rect')\n    //   .attr('class', 'data-item')\n    //   .attr('x', (d) => xScale(d.name) as number)\n    //   .attr('y', (d) => yScale(d.value))\n    //   .attr('width', xScale.bandwidth())\n    //   .attr('height', (d) => yScale(0) - yScale(d.value))\n    //   .attr('fill', (d) => colorScale(d.name))\n    //   .attr('pointer-events', 'none');\n\n    groupAxis\n      .append('g')\n      .call(xAxis)\n      .attr('transform', `translate(0, ${height - margin.bottom})`);\n\n    groupAxis.append('g').call(yAxis).attr('transform', `translate(${margin.left}, 0)`);\n  }, [id, props]);\n\n  return (\n    <div>\n      <h1>{props.name}</h1>\n      <div id={id}></div>\n    </div>\n  );\n}\n","/Users/paulomenezes/repositories/juno/client/src/components/UploadFileForm.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/DatasetsList.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/form/Input.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/form/Select.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/DatabaseConnectionForm.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Card.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/hooks/useButtonGroup.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Loading.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/utils/functions.ts",[],"/Users/paulomenezes/repositories/juno/client/src/models/dataset.ts",["108","109","110","111","112","113","114","115","116","117","118","119","120"],"import { BasicColumns } from '../utils/basic-columns';\n\nexport interface Dataset extends BasicColumns {\n  id: number;\n  path: string;\n  fieldname: string;\n  originalname: string;\n  encoding: string;\n  mimetype: string;\n  size: number;\n  destination: string;\n  filename: string;\n\n  columns: Array<DatasetColumn>;\n}\n\nexport interface DatasetColumn {\n  id: number;\n  name: string;\n  role: DatasetColumnRole;\n  type: DatasetDataType;\n  expandedType: DatasetColumnExpandedType;\n  index: number;\n  distinctValues: number;\n}\n\nexport enum DatasetColumnRole {\n  DIMENSION = 'dimension',\n  MEASURE = 'measure',\n}\n\nexport enum DatasetDataType {\n  STRING = 'string',\n  NUMBER = 'number',\n  INTEGER = 'integer',\n  BOOLEAN = 'boolean',\n  DATE = 'date',\n}\n\nexport enum DatasetColumnExpandedType {\n  QUANTITATIVE = 'quantitative',\n  ORDINAL = 'ordinal',\n  TEMPORAL = 'temporal',\n  NOMINAL = 'nominal',\n  GEO = 'geo',\n  KEY = 'key',\n}\n","/Users/paulomenezes/repositories/juno/client/src/components/ui/Alert.tsx",[],"/Users/paulomenezes/repositories/juno/client/src/components/ui/Badge.tsx",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":14,"column":17,"nodeType":"127","messageId":"128","endLine":14,"endColumn":25},{"ruleId":"129","severity":1,"message":"126","line":14,"column":17,"nodeType":"127","messageId":"128","endLine":14,"endColumn":25},{"ruleId":"125","severity":1,"message":"130","line":15,"column":19,"nodeType":"127","messageId":"128","endLine":15,"endColumn":29},{"ruleId":"129","severity":1,"message":"130","line":15,"column":19,"nodeType":"127","messageId":"128","endLine":15,"endColumn":29},{"ruleId":"125","severity":1,"message":"131","line":19,"column":10,"nodeType":"127","messageId":"128","endLine":19,"endColumn":22},{"ruleId":"129","severity":1,"message":"131","line":19,"column":10,"nodeType":"127","messageId":"128","endLine":19,"endColumn":22},{"ruleId":"125","severity":1,"message":"132","line":4,"column":22,"nodeType":"127","messageId":"128","endLine":4,"endColumn":37},{"ruleId":"129","severity":1,"message":"132","line":4,"column":22,"nodeType":"127","messageId":"128","endLine":4,"endColumn":37},{"ruleId":"125","severity":1,"message":"133","line":32,"column":11,"nodeType":"127","messageId":"128","endLine":32,"endColumn":21},{"ruleId":"129","severity":1,"message":"133","line":32,"column":11,"nodeType":"127","messageId":"128","endLine":32,"endColumn":21},{"ruleId":"125","severity":1,"message":"132","line":4,"column":22,"nodeType":"127","messageId":"128","endLine":4,"endColumn":37},{"ruleId":"129","severity":1,"message":"132","line":4,"column":22,"nodeType":"127","messageId":"128","endLine":4,"endColumn":37},{"ruleId":"125","severity":1,"message":"134","line":56,"column":11,"nodeType":"127","messageId":"128","endLine":56,"endColumn":21},{"ruleId":"129","severity":1,"message":"134","line":56,"column":11,"nodeType":"127","messageId":"128","endLine":56,"endColumn":21},{"ruleId":"125","severity":1,"message":"135","line":28,"column":3,"nodeType":"127","messageId":"128","endLine":28,"endColumn":12},{"ruleId":"125","severity":1,"message":"136","line":29,"column":3,"nodeType":"127","messageId":"128","endLine":29,"endColumn":10},{"ruleId":"125","severity":1,"message":"137","line":33,"column":3,"nodeType":"127","messageId":"128","endLine":33,"endColumn":9},{"ruleId":"125","severity":1,"message":"138","line":34,"column":3,"nodeType":"127","messageId":"128","endLine":34,"endColumn":9},{"ruleId":"125","severity":1,"message":"139","line":35,"column":3,"nodeType":"127","messageId":"128","endLine":35,"endColumn":10},{"ruleId":"125","severity":1,"message":"140","line":36,"column":3,"nodeType":"127","messageId":"128","endLine":36,"endColumn":10},{"ruleId":"125","severity":1,"message":"141","line":37,"column":3,"nodeType":"127","messageId":"128","endLine":37,"endColumn":7},{"ruleId":"125","severity":1,"message":"142","line":41,"column":3,"nodeType":"127","messageId":"128","endLine":41,"endColumn":15},{"ruleId":"125","severity":1,"message":"143","line":42,"column":3,"nodeType":"127","messageId":"128","endLine":42,"endColumn":10},{"ruleId":"125","severity":1,"message":"144","line":43,"column":3,"nodeType":"127","messageId":"128","endLine":43,"endColumn":11},{"ruleId":"125","severity":1,"message":"145","line":44,"column":3,"nodeType":"127","messageId":"128","endLine":44,"endColumn":10},{"ruleId":"125","severity":1,"message":"146","line":45,"column":3,"nodeType":"127","messageId":"128","endLine":45,"endColumn":6},{"ruleId":"125","severity":1,"message":"147","line":46,"column":3,"nodeType":"127","messageId":"128","endLine":46,"endColumn":6},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'setSpecs' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'setBarData' is assigned a value but never used.","'indexOptions' is assigned a value but never used.","'scaleBandInvert' is defined but never used.","'groupHover' is assigned a value but never used.","'colorScale' is assigned a value but never used.","'DIMENSION' is defined but never used.","'MEASURE' is defined but never used.","'STRING' is defined but never used.","'NUMBER' is defined but never used.","'INTEGER' is defined but never used.","'BOOLEAN' is defined but never used.","'DATE' is defined but never used.","'QUANTITATIVE' is defined but never used.","'ORDINAL' is defined but never used.","'TEMPORAL' is defined but never used.","'NOMINAL' is defined but never used.","'GEO' is defined but never used.","'KEY' is defined but never used.","no-global-assign","no-unsafe-negation"]